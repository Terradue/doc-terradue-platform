using System;
using ServiceStack.ServiceHost;
using Terradue.Ldap;
using Terradue.Corporate.WebServer.Common;
using Terradue.Portal;
using System.Web;
using Terradue.Corporate.Controller;
using ServiceStack.Common.Web;
using System.Collections.Generic;

namespace Terradue.Corporate.WebServer
{

    [Route ("/everest/cb", "GET")]
    public class OauthEverestCallBackRequest
    {
        [ApiMember (Name = "code", Description = "oauth code", ParameterType = "query", DataType = "string", IsRequired = true)]
        public string Code { get; set; }

        [ApiMember (Name = "state", Description = "oauth state", ParameterType = "query", DataType = "string", IsRequired = true)]
        public string State { get; set; }

        [ApiMember (Name = "ajax", Description = "ajax", ParameterType = "path", DataType = "bool", IsRequired = true)]
        public bool ajax { get; set; }

        [ApiMember (Name = "error", Description = "error", ParameterType = "path", DataType = "string", IsRequired = true)]
        public string error { get; set; }
    }

    [Route ("/oauth/everest", "GET")]
    public class OauthEverestSsoRequest
    {

        [ApiMember (Name = "return_to", Description = "return_to url", ParameterType = "query", DataType = "string", IsRequired = true)]
        public string return_to { get; set; }
    }

    [Route ("/everest/logout", "GET")]
    public class OauthEverestDeleteRequest
    {

        [ApiMember (Name = "kind", Description = "logout kind url", ParameterType = "query", DataType = "string", IsRequired = true)]
        public string kind { get; set; }

        [ApiMember (Name = "message", Description = "logout kind url", ParameterType = "query", DataType = "string", IsRequired = true)]
        public string message { get; set; }
    }

    [Api ("Terradue Corporate webserver")]
    [Restrict (EndpointAttributes.InSecure | EndpointAttributes.InternalNetworkAccess | EndpointAttributes.Json,
              EndpointAttributes.Secure | EndpointAttributes.External | EndpointAttributes.Json)]
    /// <summary>
    /// OAuth service. Used to log into the system
    /// </summary>
    public class OAuthEverestService : ServiceStack.ServiceInterface.Service
    {
        public object Get (OauthEverestSsoRequest request)
        {
            string url;
            T2CorporateWebContext context = new T2CorporateWebContext (PagePrivileges.EverybodyView);
            try {
                context.Open ();

                context.LogInfo (this, string.Format ("/oauth/everest GET"));

                var client = new EverestOauthClient (context);
                client.AuthEndpoint = context.GetConfigValue ("everest-authEndpoint");
                client.ClientId = context.GetConfigValue ("everest-clientId");
                client.ClientSecret = context.GetConfigValue ("everest-clientSecret");
                client.TokenEndpoint = context.GetConfigValue ("everest-tokenEndpoint");
                client.Callback = context.GetConfigValue ("everest-callback");
                client.Scopes = context.GetConfigValue ("everest-scopes");

                url = client.GetAuthorizationUrl ();

                context.Close ();
            } catch (Exception e) {
                context.Close ();
                throw e;
            }

            return DoRedirect (context, url, false);
        }

        public object Get (OauthEverestCallBackRequest request)
        {
            T2CorporateWebContext context = new T2CorporateWebContext (PagePrivileges.EverybodyView);
            var redirect = "";
            UserT2 user = null;
            try {
                context.Open ();

                if (!string.IsNullOrEmpty (request.error)) {
                    context.EndSession ();
                    HttpContext.Current.Response.Redirect (context.BaseUrl, true);
                }

                var client = new EverestOauthClient (context);
                client.AccessToken (request.Code);

                EverestAuthenticationType auth = new EverestAuthenticationType (context);
                auth.SetCLient (client);

                user = (UserT2)auth.GetUserProfile (context);
                if (user == null) throw new Exception ("Error to load user");
                context.LogDebug (this, string.Format ("Loaded user '{0}'", user.Username));

                user.Store ();
                user.ChangeLdapPassword (client.LoadTokenAccess().Value, null, true);//update token on LDAP as it was regenerated by the AccessToken function

                //Create the session also on SSO
                var clientSSO = new Connect2IdClient (context, context.GetConfigValue ("sso-configUrl"));
                clientSSO.SSOAuthEndpoint = context.GetConfigValue ("sso-authEndpoint");
                clientSSO.SSOApiClient = context.GetConfigValue ("sso-clientId");
                clientSSO.SSOApiSecret = context.GetConfigValue ("sso-clientSecret");
                clientSSO.SSOApiToken = context.GetConfigValue ("sso-apiAccessToken");
                clientSSO.SSODirectAuthEndpoint = context.GetConfigValue ("sso-directAuthEndpoint");

                var defaultscopes = new List<string> (context.GetConfigValue ("sso-scopes").Split (",".ToCharArray ()));

                var directAuthRequest = new OauthDirectAuthzRequest {
                    client_id = clientSSO.SSOApiClient,
                    sub_session = new OauthSubSessionRequest {
                        sub = user.Username
                    },
                    long_lived = true,
                    scope = defaultscopes
                };

                //create the SID (bypassing user credentials with direct authz
                var directAuthResponse = clientSSO.DirectAuthorization (directAuthRequest);
                var sid = directAuthResponse.sub_sid;
                var accesstoken = directAuthResponse.access_token;
                var refreshtoken = directAuthResponse.refresh_token;
                if (string.IsNullOrEmpty (sid)) throw new Exception ("SID received is empty");
                clientSSO.StoreSID(sid);
                if (!string.IsNullOrEmpty (accesstoken)) {
                    clientSSO.StoreTokenAccess (accesstoken, directAuthResponse.expires_in);
                }
                if (!string.IsNullOrEmpty (refreshtoken)) {
                    clientSSO.StoreTokenRefresh (refreshtoken);
                }

                OauthAuthzPutSessionRequest oauthrequest2 = new OauthAuthzPutSessionRequest {
                    sub = user.Username
                };

                //create the sub_sid
                //TODO: try using direct auth
                var oauthputsession = clientSSO.AuthzSession (sid, oauthrequest2, false);

                if (oauthputsession.sub_session != null) {
                    var subsid = oauthputsession.sub_session.sid;
                    clientSSO.StoreSUBSID(subsid);
                }

                redirect = oauthputsession.redirect;

                context.Close ();
            } catch (Exception e) {
                context.Close ();
                throw e;
            }
            HttpContext.Current.Response.Redirect (redirect, true);
            return null;
        }

        public object Get (OauthEverestDeleteRequest request)
        {
            T2CorporateWebContext context = new T2CorporateWebContext (PagePrivileges.EverybodyView);
            var redirect = "";
            try {
                context.Open ();

                Connect2IdClient client = new Connect2IdClient (context, context.GetConfigValue ("sso-configUrl"));
                client.SSOAuthEndpoint = context.GetConfigValue ("sso-authEndpoint");
                client.SSOApiClient = context.GetConfigValue ("sso-clientId");
                client.SSOApiSecret = context.GetConfigValue ("sso-clientSecret");
                client.SSOApiToken = context.GetConfigValue ("sso-apiAccessToken");

                if (!string.IsNullOrEmpty (request.kind) && request.kind.Equals ("error")) {
                    redirect = context.BaseUrl + "/portal/error?msg=Error%20from%20everest&longmsg=" + request.message;
                } else {
                    redirect = context.BaseUrl;
                }

                context.EndSession ();
                context.Close ();
            } catch (Exception e) {
                context.Close ();
                throw e;
            }
            HttpContext.Current.Response.Redirect (redirect, true);
            return null;
        }

        private HttpResult DoRedirect (IfyContext context, string redirect, bool ajax)
        {
            context.LogDebug (this, string.Format ("redirect to {0}", redirect));
            if (ajax) {
                HttpResult redirectResponse = new HttpResult ();
                redirectResponse.Headers [HttpHeaders.Location] = redirect;
                redirectResponse.StatusCode = System.Net.HttpStatusCode.NoContent;
                return redirectResponse;
            } else {
                HttpContext.Current.Response.Redirect (redirect, true);
            }
            return null;
        }

    }
}

